.s1xpvx4y scroll-view{padding:20px;border:1px solid red;box-sizing:border-box;height:600px;}.s1xpvx4y .template-item{border-bottom:1px solid #ccc;padding:10px;margin-bottom:10px;font-size:24px;}.s1xpvx4y .template-init,.s1xpvx4y .template-no-more{text-align:center;padding:20px;color:#999;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWdlcy9pbmRleC9pbmRleC50c3giXSwibmFtZXMiOlsiLnMxeHB2eDR5Il0sIm1hcHBpbmdzIjoiQUFzQk1BIiwiZmlsZSI6InNyYy9wYWdlcy9pbmRleC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIEltYWdlLCBUZXh0LCBDaGVja2JveCB9IGZyb20gXCJAdGFyb2pzL2NvbXBvbmVudHNcIjtcbmltcG9ydCBcIi4vaW5kZXguc2Nzc1wiO1xuaW1wb3J0IFRhcm8gZnJvbSBcIkB0YXJvanMvdGFyb1wiO1xuaW1wb3J0IFRhcm9TZWxlY3QgZnJvbSBcIkBqc3dvcmsvdGFyby1zZWxlY3RcIjtcbi8vIGltcG9ydCBUYXJvRWNoYXJ0cyBmcm9tIFwiQGpzd29yay90YXJvLWVjaGFydHNcIjtcbi8vIGltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSBcIkBqc3dvcmsvZWNoYXJ0cy10aW55L2xpYi9lY2hhcnRzLm1pblwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBsaW5hcmlhL2NvcmVcIjtcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCJsaW5hcmlhL3JlYWN0XCI7XG5pbXBvcnQgU3R5bGVkQm94IGZyb20gXCJAanN3b3JrL3N0eWxlZC1ib3hcIjtcbmltcG9ydCB7IEF0QnV0dG9uLCBBdEZhYiwgQXRJY29uIH0gZnJvbSBcInRhcm8tdWlcIjtcbi8vIGltcG9ydFxuXG4vLyBodHRwOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9waG90b3M/X3N0YXJ0PTImX2xpbWl0PTVcblxuaW1wb3J0IFRhcm9EYXRhTGlzdCBmcm9tIFwiQGpzd29yay90YXJvLWRhdGEtbGlzdFwiO1xuaW1wb3J0IFRhcm9TZWxlY3RHcm91cCBmcm9tIFwiQGpzd29yay90YXJvLXNlbGVjdC1ncm91cFwiO1xuaW1wb3J0IENoZWNrYm94VmlldyBmcm9tIFwiQGpzd29yay90YXJvLWNoZWNrYm94LWdyb3VwXCI7XG5pbXBvcnQgUmFkaW9Hcm91cFZpZXcgZnJvbSBcIkBqc3dvcmsvdGFyby1yYWRpby1ncm91cFwiO1xuXG5PYmplY3QuYXNzaWduKFN0eWxlZEJveC5kZWZhdWx0UHJvcHMsIHsgZW5naW5lOiB7IHN0eWxlZCwgY3NzIH0gfSk7XG5cbmNvbnN0IFN0eWxlZExpc3QgPSBzdHlsZWQoVmlldylgXG4gIHNjcm9sbC12aWV3IHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGhlaWdodDogNjAwcHg7XG4gIH1cbiAgLnRlbXBsYXRlLWl0ZW0ge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIH1cblxuICAudGVtcGxhdGUtaW5pdCxcbiAgLnRlbXBsYXRlLW5vLW1vcmUge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIGNvbG9yOiAjOTk5O1xuICB9XG5gO1xuXG5jb25zdCBUYXJvR3JvdXBDb250YWludGVyID0gc3R5bGVkKFZpZXcpYFxuICBwYWRkaW5nOiAxMHB4O1xuICBtYXJnaW46IDIwcHggYXV0bztcbiAgd2lkdGg6IDgwJTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAuaXMtcGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiAjOTk5O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmRleCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIHJlYWR5OiBmYWxzZSxcbiAgICBkYXRhU291cmNlOiBbXSxcbiAgICBpdGVtczogW1xuICAgICAgeyBuYW1lOiBcImZlaVwiLCBpZDogMSB9LFxuICAgICAgeyBuYW1lOiBcInpoZW5nXCIsIGlkOiAyIH0sXG4gICAgICB7IG5hbWU6IFwiYWZlaXNoaXBcIiwgaWQ6IDMgfSxcbiAgICBdLFxuICAgIGdyb3VwVmFsdWU6IFstMSwgLTFdLFxuICAgIGdyb3VwSXRlbXM6IFtcbiAgICAgIFtcbiAgICAgICAgeyB2YWx1ZTogXCJ4eFwiLCBsYWJlbDogXCLlsI/lraZcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcImN6XCIsIGxhYmVsOiBcIuWIneS4rVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiZ3pcIiwgbGFiZWw6IFwi6auY5LitXCIgfSxcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIHsgdmFsdWU6IFwiMDFcIiwgbGFiZWw6IFwiMDHnj61cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjAyXCIsIGxhYmVsOiBcIjAy54+tXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCIwM1wiLCBsYWJlbDogXCIwM+ePrVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiMDRcIiwgbGFiZWw6IFwiMDTnj61cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjA1XCIsIGxhYmVsOiBcIjA154+tXCIgfSxcbiAgICAgIF0sXG4gICAgXSxcbiAgICByYWRpb0l0ZW1zOiBbXG4gICAgICB7IHZhbHVlOiBcInh4XCIsIGxhYmVsOiBcIuWwj+WtplwiIH0sXG4gICAgICB7IHZhbHVlOiBcImN6XCIsIGxhYmVsOiBcIuWIneS4rVwiIH0sXG4gICAgICB7IHZhbHVlOiBcImd6XCIsIGxhYmVsOiBcIumrmOS4rVwiIH0sXG4gICAgXSxcbiAgICBjaGVja0l0ZW1zOiBbXG4gICAgICB7IHZhbHVlOiBcIjAxXCIsIGxhYmVsOiBcIjAx54+tXCIgfSxcbiAgICAgIHsgdmFsdWU6IFwiMDJcIiwgbGFiZWw6IFwiMDLnj61cIiB9LFxuICAgICAgeyB2YWx1ZTogXCIwM1wiLCBsYWJlbDogXCIwM+ePrVwiIH0sXG4gICAgICB7IHZhbHVlOiBcIjA0XCIsIGxhYmVsOiBcIjA054+tXCIgfSxcbiAgICAgIHsgdmFsdWU6IFwiMDVcIiwgbGFiZWw6IFwiMDXnj61cIiB9LFxuICAgIF0sXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge31cblxuICBjb21wb25lbnREaWRNb3VudCgpIHt9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7fVxuXG4gIGNvbXBvbmVudERpZFNob3coKSB7fVxuXG4gIGNvbXBvbmVudERpZEhpZGUoKSB7fVxuXG4gIGhhbmRsZUluaXQgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0O1xuICAgIHZhbHVlLnNldE9wdGlvbih7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIuafkOWcsOWMuuiSuOWPkemHj+WSjOmZjeawtOmHj1wiLFxuICAgICAgICBzdWJ0ZXh0OiBcIue6r+WxnuiZmuaehFwiLFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogXCJheGlzXCIsXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRhdGE6IFtcIuiSuOWPkemHj1wiLCBcIumZjeawtOmHj1wiXSxcbiAgICAgIH0sXG4gICAgICB0b29sYm94OiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGZlYXR1cmU6IHtcbiAgICAgICAgICBkYXRhVmlldzogeyBzaG93OiB0cnVlLCByZWFkT25seTogZmFsc2UgfSxcbiAgICAgICAgICBtYWdpY1R5cGU6IHsgc2hvdzogdHJ1ZSwgdHlwZTogW1wibGluZVwiLCBcImJhclwiXSB9LFxuICAgICAgICAgIHJlc3RvcmU6IHsgc2hvdzogdHJ1ZSB9LFxuICAgICAgICAgIHNhdmVBc0ltYWdlOiB7IHNob3c6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjYWxjdWxhYmxlOiB0cnVlLFxuICAgICAgeEF4aXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICBcIjHmnIhcIixcbiAgICAgICAgICAgIFwiMuaciFwiLFxuICAgICAgICAgICAgXCIz5pyIXCIsXG4gICAgICAgICAgICBcIjTmnIhcIixcbiAgICAgICAgICAgIFwiNeaciFwiLFxuICAgICAgICAgICAgXCI25pyIXCIsXG4gICAgICAgICAgICBcIjfmnIhcIixcbiAgICAgICAgICAgIFwiOOaciFwiLFxuICAgICAgICAgICAgXCI55pyIXCIsXG4gICAgICAgICAgICBcIjEw5pyIXCIsXG4gICAgICAgICAgICBcIjEx5pyIXCIsXG4gICAgICAgICAgICBcIjEy5pyIXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB5QXhpczogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJ2YWx1ZVwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCLokrjlj5Hph49cIixcbiAgICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgIDIuMCwgNC45LCA3LjAsIDIzLjIsIDI1LjYsIDc2LjcsIDEzNS42LCAxNjIuMiwgMzIuNiwgMjAuMCwgNi40LCAzLjMsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXJrUG9pbnQ6IHtcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgeyB0eXBlOiBcIm1heFwiLCBuYW1lOiBcIuacgOWkp+WAvFwiIH0sXG4gICAgICAgICAgICAgIHsgdHlwZTogXCJtaW5cIiwgbmFtZTogXCLmnIDlsI/lgLxcIiB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtMaW5lOiB7XG4gICAgICAgICAgICBkYXRhOiBbeyB0eXBlOiBcImF2ZXJhZ2VcIiwgbmFtZTogXCLlubPlnYflgLxcIiB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCLpmY3msLTph49cIixcbiAgICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgIDIuNiwgNS45LCA5LjAsIDI2LjQsIDI4LjcsIDcwLjcsIDE3NS42LCAxODIuMiwgNDguNywgMTguOCwgNi4wLCAyLjMsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXJrUG9pbnQ6IHtcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgeyBuYW1lOiBcIuW5tOacgOmrmFwiLCB2YWx1ZTogMTgyLjIsIHhBeGlzOiA3LCB5QXhpczogMTgzIH0sXG4gICAgICAgICAgICAgIHsgbmFtZTogXCLlubTmnIDkvY5cIiwgdmFsdWU6IDIuMywgeEF4aXM6IDExLCB5QXhpczogMyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtMaW5lOiB7XG4gICAgICAgICAgICBkYXRhOiBbeyB0eXBlOiBcImF2ZXJhZ2VcIiwgbmFtZTogXCLlubPlnYflgLxcIiB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcblxuICBhcGlTZXJ2aWNlID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIFRhcm8ucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXJsOiBgaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zP19wYWdlPSR7b3B0aW9ucy5wYWdlfSZfbGltaXQ9JHtvcHRpb25zLnNpemV9YCxcbiAgICAgICAgc3VjY2VzczogcmVzb2x2ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNoZWNrVGVtcGxhdGUgPSAoeyBpdGVtIH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e3sgYm9yZGVyOiBcIjFweCBzb2xpZCByZWRcIiB9fT5cbiAgICAgICAgPENoZWNrYm94IHZhbHVlPXtpdGVtLnZhbHVlfT57aXRlbS5sYWJlbH08L0NoZWNrYm94PlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIGNvbnN0IGhlYWRlciA9IGNzc2BcbiAgICAvLyAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAvLyAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIC8vICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICAvLyBgO1xuXG4gICAgLy8gY29uc29sZS5sb2coaGVhZGVyKTtcblxuICAgIGNvbnN0IHsgZGF0YVNvdXJjZSwgZ3JvdXBWYWx1ZSwgcmFkaW9JdGVtcywgY2hlY2tJdGVtcywgZ3JvdXBJdGVtcyB9ID1cbiAgICAgIHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IGNsYXNzTmFtZT1cImluZGV4XCI+XG4gICAgICAgIHsvKiA8UmFkaW9Hcm91cFZpZXdcbiAgICAgICAgICB2YWx1ZT1cImN6XCJcbiAgICAgICAgICBpdGVtcz17cmFkaW9JdGVtc31cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8Q2hlY2tib3hWaWV3XG4gICAgICAgICAgaXRlbXM9e2NoZWNrSXRlbXN9XG4gICAgICAgICAgdmFsdWU9e1tcIjAxXCIsIFwiMDJcIl19XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPENoZWNrYm94Vmlld1xuICAgICAgICAgIGl0ZW1zPXtjaGVja0l0ZW1zfVxuICAgICAgICAgIHRlbXBsYXRlPXt0aGlzLmNoZWNrVGVtcGxhdGV9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz4gKi99XG4gICAgICAgIHsvKiA8UGlja3MgLz4gKi99XG4gICAgICAgIHsvKiA8VGFyb0dyb3VwQ29udGFpbnRlcj5cbiAgICAgICAgICA8VGFyb1NlbGVjdEdyb3VwXG4gICAgICAgICAgICBpdGVtcz17Z3JvdXBJdGVtc31cbiAgICAgICAgICAgIHZhbHVlPXtncm91cFZhbHVlfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBncm91cFZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9UYXJvR3JvdXBDb250YWludGVyPiAqL31cbiAgICAgICAgey8qIDxTdHlsZWRCb3ggcD17MTB9IGRlYnVnIGF1dG8gd3A9ezh9PlxuICAgICAgICAgIFN0eWxlQm94IGNvbW1pbmcuXG4gICAgICAgIDwvU3R5bGVkQm94PiAqL31cbiAgICAgICAgey8qIDxUYXJvRWNoYXJ0c1xuICAgICAgICAgIGVjaGFydHM9e2VjaGFydHN9XG4gICAgICAgICAgd2lkdGg9e1wiMTAwJVwifVxuICAgICAgICAgIGhlaWdodD17MzAwfVxuICAgICAgICAgIG9uSW5pdD17dGhpcy5oYW5kbGVJbml0fVxuICAgICAgICAgIGNhbnZhc0lkPVwibXlDYW52YXNcIlxuICAgICAgICAvPiAqL31cblxuICAgICAgICB7LyogPFRhcm9TZWxlY3RcbiAgICAgICAgICBsYWJlbEtleT1cIm5hbWVcIlxuICAgICAgICAgIHZhbHVlS2V5PVwiaWRcIlxuICAgICAgICAgIG5vZWNob1xuICAgICAgICAgIGl0ZW1zPXt0aGlzLnN0YXRlLml0ZW1zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlOlwiLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz4gKi99XG5cbiAgICAgICAgPFN0eWxlZExpc3Q+XG4gICAgICAgICAgPFRhcm9EYXRhTGlzdFxuICAgICAgICAgICAgc2Nyb2xsWVxuICAgICAgICAgICAgcmVmcmVzaGVyRW5hYmxlZFxuICAgICAgICAgICAgYXBpPXt0aGlzLmFwaVNlcnZpY2V9XG4gICAgICAgICAgICBzaXplPXsyMH1cbiAgICAgICAgICAgIGRhdGFHZXR0ZXI9eyhlKSA9PiBlLmRhdGF9XG4gICAgICAgICAgICBoYXNNb3JlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVcIiwgZSwgZS5kYXRhLmxlbmd0aCA8PSAxMCk7XG4gICAgICAgICAgICAgIHJldHVybiBlLmRhdGEubGVuZ3RoID09PSAyMDtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgeyBpdGVtcyB9ID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhU291cmNlOiBpdGVtcyB9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0ZW1wbGF0ZT17KGFjdGlvbiwgYXJncykgPT4ge1xuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcIklURU1cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgaXRlbSwgaW5kZXggfSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxWaWV3IGNsYXNzTmFtZT1cInRlbXBsYXRlLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2l0ZW0uaWR9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3ggY2hlY2tlZD17aXRlbS5jb21wbGV0ZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+SGVsbG8ge2l0ZW0udGl0bGV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcIkxPQURfTU9SRVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxWaWV3IGNsYXNzTmFtZT1cInRlbXBsYXRlLWluaXRcIj7kuIrmu5HliqDovb3mm7TlpJouLi48L1ZpZXc+O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJJTklUXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPFZpZXcgY2xhc3NOYW1lPVwidGVtcGxhdGUtaW5pdFwiPuaVsOaNruWKoOi9veS4rS4uLjwvVmlldz47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcIk5PX01PUkVcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8VmlldyBjbGFzc05hbWU9XCJ0ZW1wbGF0ZS1uby1tb3JlXCI+5rKh5pyJ5Y+v5Lul5Yqg6L2955qE5pWw5o2u5ZWmPC9WaWV3PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TdHlsZWRMaXN0PlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbn1cbiJdfQ==*/