.s1xpvx4y scroll-view{border:1px solid red;box-sizing:border-box;height:600px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWdlcy9pbmRleC9pbmRleC50c3giXSwibmFtZXMiOlsiLnMxeHB2eDR5Il0sIm1hcHBpbmdzIjoiQUFtQk1BIiwiZmlsZSI6InNyYy9wYWdlcy9pbmRleC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIEltYWdlLCBUZXh0IH0gZnJvbSBcIkB0YXJvanMvY29tcG9uZW50c1wiO1xuaW1wb3J0IFwiLi9pbmRleC5zY3NzXCI7XG5pbXBvcnQgVGFybyBmcm9tIFwiQHRhcm9qcy90YXJvXCI7XG5pbXBvcnQgVGFyb1NlbGVjdCBmcm9tIFwiQGpzd29yay90YXJvLXNlbGVjdFwiO1xuLy8gaW1wb3J0IFRhcm9FY2hhcnRzIGZyb20gXCJAanN3b3JrL3Rhcm8tZWNoYXJ0c1wiO1xuLy8gaW1wb3J0ICogYXMgZWNoYXJ0cyBmcm9tIFwiQGpzd29yay9lY2hhcnRzLXRpbnkvbGliL2VjaGFydHMubWluXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiQGxpbmFyaWEvY29yZVwiO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcImxpbmFyaWEvcmVhY3RcIjtcbmltcG9ydCBTdHlsZWRCb3ggZnJvbSBcIkBqc3dvcmsvc3R5bGVkLWJveFwiO1xuaW1wb3J0IHsgQXRCdXR0b24sIEF0RmFiLCBBdEljb24gfSBmcm9tIFwidGFyby11aVwiO1xuLy8gaW1wb3J0XG5cbi8vIGh0dHA6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bob3Rvcz9fc3RhcnQ9MiZfbGltaXQ9NVxuXG5pbXBvcnQgVGFyb0RhdGFMaXN0IGZyb20gXCJAanN3b3JrL3Rhcm8tZGF0YS1saXN0XCI7XG5cbk9iamVjdC5hc3NpZ24oU3R5bGVkQm94LmRlZmF1bHRQcm9wcywgeyBlbmdpbmU6IHsgc3R5bGVkLCBjc3MgfSB9KTtcblxuY29uc3QgU3R5bGVkTGlzdCA9IHN0eWxlZChWaWV3KWBcbiAgc2Nyb2xsLXZpZXcge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGhlaWdodDogNjAwcHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgcmVhZHk6IGZhbHNlLFxuICAgIGRhdGFTb3VyY2U6IFtdLFxuICAgIGl0ZW1zOiBbXG4gICAgICB7IG5hbWU6IFwiZmVpXCIsIGlkOiAxIH0sXG4gICAgICB7IG5hbWU6IFwiemhlbmdcIiwgaWQ6IDIgfSxcbiAgICAgIHsgbmFtZTogXCJhZmVpc2hpcFwiLCBpZDogMyB9LFxuICAgIF0sXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge31cblxuICBjb21wb25lbnREaWRNb3VudCgpIHt9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7fVxuXG4gIGNvbXBvbmVudERpZFNob3coKSB7fVxuXG4gIGNvbXBvbmVudERpZEhpZGUoKSB7fVxuXG4gIGhhbmRsZUluaXQgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0O1xuICAgIHZhbHVlLnNldE9wdGlvbih7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIuafkOWcsOWMuuiSuOWPkemHj+WSjOmZjeawtOmHj1wiLFxuICAgICAgICBzdWJ0ZXh0OiBcIue6r+WxnuiZmuaehFwiLFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogXCJheGlzXCIsXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRhdGE6IFtcIuiSuOWPkemHj1wiLCBcIumZjeawtOmHj1wiXSxcbiAgICAgIH0sXG4gICAgICB0b29sYm94OiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGZlYXR1cmU6IHtcbiAgICAgICAgICBkYXRhVmlldzogeyBzaG93OiB0cnVlLCByZWFkT25seTogZmFsc2UgfSxcbiAgICAgICAgICBtYWdpY1R5cGU6IHsgc2hvdzogdHJ1ZSwgdHlwZTogW1wibGluZVwiLCBcImJhclwiXSB9LFxuICAgICAgICAgIHJlc3RvcmU6IHsgc2hvdzogdHJ1ZSB9LFxuICAgICAgICAgIHNhdmVBc0ltYWdlOiB7IHNob3c6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjYWxjdWxhYmxlOiB0cnVlLFxuICAgICAgeEF4aXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICBcIjHmnIhcIixcbiAgICAgICAgICAgIFwiMuaciFwiLFxuICAgICAgICAgICAgXCIz5pyIXCIsXG4gICAgICAgICAgICBcIjTmnIhcIixcbiAgICAgICAgICAgIFwiNeaciFwiLFxuICAgICAgICAgICAgXCI25pyIXCIsXG4gICAgICAgICAgICBcIjfmnIhcIixcbiAgICAgICAgICAgIFwiOOaciFwiLFxuICAgICAgICAgICAgXCI55pyIXCIsXG4gICAgICAgICAgICBcIjEw5pyIXCIsXG4gICAgICAgICAgICBcIjEx5pyIXCIsXG4gICAgICAgICAgICBcIjEy5pyIXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB5QXhpczogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJ2YWx1ZVwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCLokrjlj5Hph49cIixcbiAgICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgIDIuMCwgNC45LCA3LjAsIDIzLjIsIDI1LjYsIDc2LjcsIDEzNS42LCAxNjIuMiwgMzIuNiwgMjAuMCwgNi40LCAzLjMsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXJrUG9pbnQ6IHtcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgeyB0eXBlOiBcIm1heFwiLCBuYW1lOiBcIuacgOWkp+WAvFwiIH0sXG4gICAgICAgICAgICAgIHsgdHlwZTogXCJtaW5cIiwgbmFtZTogXCLmnIDlsI/lgLxcIiB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtMaW5lOiB7XG4gICAgICAgICAgICBkYXRhOiBbeyB0eXBlOiBcImF2ZXJhZ2VcIiwgbmFtZTogXCLlubPlnYflgLxcIiB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCLpmY3msLTph49cIixcbiAgICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgIDIuNiwgNS45LCA5LjAsIDI2LjQsIDI4LjcsIDcwLjcsIDE3NS42LCAxODIuMiwgNDguNywgMTguOCwgNi4wLCAyLjMsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXJrUG9pbnQ6IHtcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgeyBuYW1lOiBcIuW5tOacgOmrmFwiLCB2YWx1ZTogMTgyLjIsIHhBeGlzOiA3LCB5QXhpczogMTgzIH0sXG4gICAgICAgICAgICAgIHsgbmFtZTogXCLlubTmnIDkvY5cIiwgdmFsdWU6IDIuMywgeEF4aXM6IDExLCB5QXhpczogMyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hcmtMaW5lOiB7XG4gICAgICAgICAgICBkYXRhOiBbeyB0eXBlOiBcImF2ZXJhZ2VcIiwgbmFtZTogXCLlubPlnYflgLxcIiB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcblxuICBhcGlTZXJ2aWNlID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIFRhcm8ucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXJsOiBgaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bob3Rvcz9fc3RhcnQ9JHtvcHRpb25zLnBhZ2V9Jl9saW1pdD0ke29wdGlvbnMuc2l6ZX1gLFxuICAgICAgICBzdWNjZXNzOiByZXNvbHZlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIGNvbnN0IGhlYWRlciA9IGNzc2BcbiAgICAvLyAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAvLyAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIC8vICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICAvLyBgO1xuXG4gICAgLy8gY29uc29sZS5sb2coaGVhZGVyKTtcblxuICAgIGNvbnN0IHsgZGF0YVNvdXJjZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgY2xhc3NOYW1lPVwiaW5kZXhcIj5cbiAgICAgICAgPHZpZXcgZGF0YS1rZXk9XCJoZWxsb1wiIGRhdGEtdmFsdWU9XCJ3b3JsZFwiPlxuICAgICAgICAgIDFIZWxsbyB3cm9sZDJcbiAgICAgICAgPC92aWV3PlxuICAgICAgICB7LyogPFN0eWxlZEJveCBwPXsxMH0gZGVidWcgYXV0byB3cD17OH0+XG4gICAgICAgICAgU3R5bGVCb3ggY29tbWluZy5cbiAgICAgICAgPC9TdHlsZWRCb3g+ICovfVxuICAgICAgICB7LyogPFRhcm9FY2hhcnRzXG4gICAgICAgICAgZWNoYXJ0cz17ZWNoYXJ0c31cbiAgICAgICAgICB3aWR0aD17XCIxMDAlXCJ9XG4gICAgICAgICAgaGVpZ2h0PXszMDB9XG4gICAgICAgICAgb25Jbml0PXt0aGlzLmhhbmRsZUluaXR9XG4gICAgICAgICAgY2FudmFzSWQ9XCJteUNhbnZhc1wiXG4gICAgICAgIC8+ICovfVxuICAgICAgICA8QXRCdXR0b24gdHlwZT1cInByaW1hcnlcIiBzaXplPVwibm9ybWFsXCI+XG4gICAgICAgICAg5oyJ6ZKu5paH5qGIXG4gICAgICAgIDwvQXRCdXR0b24+XG5cbiAgICAgICAgPEF0QnV0dG9uIHR5cGU9XCJzZWNvbmRhcnlcIiBzaXplPVwibm9ybWFsXCI+XG4gICAgICAgICAg5oyJ6ZKu5paH5qGIXG4gICAgICAgIDwvQXRCdXR0b24+XG4gICAgICAgIDxBdEljb24gdmFsdWU9XCJjbG9ja1wiIHNpemU9XCIzMFwiIGNvbG9yPVwiI0YwMFwiPjwvQXRJY29uPlxuXG4gICAgICAgIDxBdEZhYj5cbiAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9XCJhdC1mYWJfX2ljb24gYXQtaWNvbiBhdC1pY29uLW1lbnVcIj48L1RleHQ+XG4gICAgICAgIDwvQXRGYWI+XG5cbiAgICAgICAgPFRhcm9TZWxlY3RcbiAgICAgICAgICBsYWJlbEtleT1cIm5hbWVcIlxuICAgICAgICAgIHZhbHVlS2V5PVwiaWRcIlxuICAgICAgICAgIHZhbHVlPXsyfVxuICAgICAgICAgIGl0ZW1zPXt0aGlzLnN0YXRlLml0ZW1zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlOlwiLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cblxuICAgICAgICA8U3R5bGVkTGlzdD5cbiAgICAgICAgICA8VGFyb0RhdGFMaXN0XG4gICAgICAgICAgICBzY3JvbGxZXG4gICAgICAgICAgICByZWZyZXNoZXJFbmFibGVkXG4gICAgICAgICAgICBhcGk9e3RoaXMuYXBpU2VydmljZX1cbiAgICAgICAgICAgIGRhdGFHZXR0ZXI9eyhlKSA9PiBlLmRhdGF9XG4gICAgICAgICAgICBoYXNNb3JlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVcIiwgZSk7XG4gICAgICAgICAgICAgIHJldHVybiBlLmRhdGEubGVuZ3RoIDw9IDEwO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGFTb3VyY2U6IGl0ZW1zIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZGF0YVNvdXJjZS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxWaWV3PlxuICAgICAgICAgICAgICAgICAgPFZpZXc+SGVsbG8ge2l0ZW0udGl0bGV9PC9WaWV3PlxuICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz17aXRlbS51cmx9IHN0eWxlPXt7IHdpZHRoOiAxMjAsIGhlaWdodDogMTIwIH19IC8+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9UYXJvRGF0YUxpc3Q+XG4gICAgICAgIDwvU3R5bGVkTGlzdD5cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG59XG4iXX0=*/