.s1xpvx4y scroll-view{padding:20px;border:1px solid red;box-sizing:border-box;height:600px;}.s1xpvx4y .template-item{border-bottom:1px solid #ccc;padding:10px;margin-bottom:10px;font-size:24px;}.s1xpvx4y .template-init,.s1xpvx4y .template-no-more{text-align:center;padding:20px;color:#999;}
/*# sourceMappingURL=data:application/json;base64,*/